clear
source globals

print_title "TODO INSTALL" "This process will create a fully functioning to do app including all infrastructure." "15"

REDISNAME=todo-cache
REGION=us-central1
ROOTPASSWORD=password123
PROJECT=$(gcloud config get-value project | xargs)

collectParamters PROJECT "$1" "the id of the Google Cloud Project" "$PROJECT" 
gcloud config set project ${PROJECT}
collectParamters REGION "$2" "the Google Cloud Region" "$REGION" 

SQLNAME=$PROJECT-todo-db
collectParamters SQLNAME "$3" "the Cloud SQL Database name" "$SQLNAME" 

ROOTPASSWORD=password123
collectParamters ROOTPASSWORD "$4" "the Cloud SQL root password" "$ROOTPASSWORD" 


# All of these require the project id to be set. 
PROJECTNUMBER=$(gcloud projects list --filter="$PROJECT" --format="value(PROJECT_NUMBER)" | xargs)	
SABUILD=$PROJECTNUMBER@cloudbuild.gserviceaccount.com
SACOMPUTE=$PROJECTNUMBER-compute@developer.gserviceaccount.com

printf "${LCYAN}Project Details${NC} \n"
printf "Project ID:         $PROJECT \n"
printf "Project Number:     $PROJECTNUMBER \n"
printf "Region:             $REGION \n"
printf "SQL Server Name:    $SQLNAME \n"
printf "Redis Server Name:  $REDISNAME \n"

section_open "Enabling services in your GCP project"
gcloud services enable vpcaccess.googleapis.com 
gcloud services enable servicenetworking.googleapis.com 
gcloud services enable cloudbuild.googleapis.com 
gcloud services enable redis.googleapis.com 
gcloud services enable run.googleapis.com 
gcloud services enable sql-component.googleapis.com 
gcloud services enable sqladmin.googleapis.com 
gcloud services enable storage.googleapis.com 
gcloud services enable secretmanager.googleapis.com 
gcloud services enable artifactregistry.googleapis.com 
section_close

section_open "Create Networking for SQL Instance"
gcloud compute addresses create google-managed-services-vpn-connector \
	--global --purpose=VPC_PEERING --prefix-length=16 --network=default \
    --no-user-output-enabled 
gcloud services vpc-peerings connect \
    --service=servicenetworking.googleapis.com \
    --ranges=google-managed-services-vpn-connector \
    --network=default 
section_close

section_open "Create SQL Instance"
gcloud beta sql instances create $SQLNAME --database-version=MYSQL_5_7 \
	--tier=db-g1-small --region=$REGION --root-password=$ROOTPASSWORD	\
	--no-assign-ip --network=default --async
section_close

section_open "Create Redis Instance"
gcloud redis instances create $REDISNAME --async --size=1 --region=$REGION \
	--no-user-output-enabled  	
section_close

section_open "Create VPC access connector"
gcloud compute networks vpc-access connectors create \
	vpc-connector --network default --region $REGION \
	--range 10.8.0.0/28 --no-user-output-enabled  	
section_close

section_open "Setting permissions"
printf "Enabling Cloud Build Service Account to deploy to Cloud Run on $PROJECT\n"
gcloud projects add-iam-policy-binding $PROJECT \
	--member serviceAccount:$SABUILD \
	--role roles/run.developer --no-user-output-enabled
printf "Enabling Cloud Build Service Account to set VPN Access for Cloud Run \n"
gcloud projects add-iam-policy-binding $PROJECT \
  	--member serviceAccount:$SABUILD \
  	--role roles/vpaccess.user --no-user-output-enabled
printf "Enabling Cloud Build Service Account to perform Service Account activities \n"
gcloud projects add-iam-policy-binding $PROJECT \
  	--member serviceAccount:$SABUILD \
  	--role roles/iam.serviceAccountUser --no-user-output-enabled
printf "Enabling Cloud Build Service Account to publish to Cloud Run \n"
gcloud projects add-iam-policy-binding $PROJECT \
	--member=serviceAccount:$SABUILD \
	--role=roles/run.admin --no-user-output-enabled
printf "Enabling Cloud Build Service Account to consume secrets \n"
gcloud projects add-iam-policy-binding $PROJECT \
  	--member serviceAccount:$SABUILD \
  	--role roles/secretmanager.secretAccessor --no-user-output-enabled
printf "Enabling Cloud Build Service Account to create content in Artifact Registry \n"
gcloud projects add-iam-policy-binding $PROJECT \
	--member=serviceAccount:$SABUILD \
	--role=roles/artifactregistry.admin --no-user-output-enabled
section_close

section_open "Creating Artifact Registry repoistory for containers"
gcloud artifacts repositories create todo-app --location=$REGION \
    --repository-format=docker  
section_close

section_open "Waiting for SQL Server IP to be available"
IP=$(gcloud beta sql instances describe $SQLNAME  --format="value(ipAddresses[0].ipAddress)")
DURATION=5
i=0
limit=60
while [ "$IP" = "" ]
do
    i=$(( $i + 1 ))
    if [ $i -eq 1 ]
    then
        printf "Checking if IP is available \n"
    fi

    if [ $i -eq $limit ]
    then
        printf "Timed out \n"
        exit 1
    fi
    
    IP=$(gcloud beta sql instances describe $SQLNAME  --format="value(ipAddresses[0].ipAddress)")
    printf "."
    sleep $DURATION
done
section_close


# Using Cloud Secret Manager to store the hostname of the SQL and Redis servers
# There isn't a better way to inject them into this process in a way that 
# makes the clould build yaml useful outside of this script.
section_open "Creating Secrets"
REDISHOST=$(gcloud redis instances describe $REDISNAME --region $REGION --format="value(host)" | xargs)
SQLHOST=$(gcloud sql instances describe $SQLNAME --format="value(ipAddresses[0].ipAddress)" | xargs)
gcloud secrets create sqlhost --replication-policy="automatic" --no-user-output-enabled 
echo ${SQLHOST} | tr -d '\n' | gcloud secrets versions add sqlhost --data-file=-
gcloud secrets create redishost --replication-policy="automatic" --no-user-output-enabled 
echo ${REDISHOST} | tr -d '\n' | gcloud secrets versions add redishost --data-file=-
section_close

section_open "Deploying Code to Production"
gcloud builds submit --substitutions=_REGION=$REGION .
section_close

section_open "Waiting for SQL Server to be fully operational"
state=$(gcloud beta sql instances describe $SQLNAME  --format="value(state)")
DURATION=5
i=0
limit=60
while [ "$state" != "RUNNABLE" ]
do
    i=$(( $i + 1 ))
    if [ $i -eq 1 ]
    then
        printf "Checking if database is up \n"
    fi

    if [ $i -eq $limit ]
    then
        printf "Timed out \n"
        exit 1
    fi
    
    state=$(gcloud beta sql instances describe $SQLNAME  --format="value(state)")
    printf "."
    sleep $DURATION
done	
section_close


section_open "Populating SQL Schema and loading starting data"
SQLSERVICEACCOUNT=$(gcloud sql instances describe $SQLNAME --format="value(serviceAccountEmailAddress)" | xargs)
gsutil mb gs://$PROJECT-temp 
gsutil cp code/database/schema.sql gs://$PROJECT-temp/schema.sql
echo $SQLSERVICEACCOUNT
gsutil iam ch serviceAccount:$SQLSERVICEACCOUNT:objectViewer gs://$PROJECT-temp/
gcloud sql import sql $SQLNAME gs://$PROJECT-temp/schema.sql -q
gsutil rm gs://$PROJECT-temp/schema.sql
gsutil rb gs://$PROJECT-temp
section_close



URL=$(gcloud run services describe todo-fe --region=$REGION --format="value(status.url)" | xargs)

printf $DIVIDER
printf "CONGRATS!!!!!!! \n"
printf "You have configured a project, spun up architecture and deployed code.\n"
printf "See your application at: \n"
printf "\n ${CYAN}$URL${NC} \n"
printf $DIVIDER